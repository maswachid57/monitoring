apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard-grafana
  annotations:

  labels:
    app.kubernetes.io/instance: dashboard-grafana
    app.kubernetes.io/name: dashboard-grafana
    objectset.rio.cattle.io/hash: b30a3e494dbe9a6d7c007baf358ad7461127fb4f
    workload.user.cattle.io/workloadselector: apps.deployment-monitoring-dashboard-grafana
    #  key: string
#  namespace: monitoring

spec:
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-monitoring-dashboard-grafana
      #  key: string
#    matchExpressions:
#      - key: string
#        operator: string
#        values:
#          - string
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: apps.deployment-monitoring-dashboard-grafana
        #  key: string
      creationTimestamp: #string
      namespace: monitoring

    spec:
      containers:
        - image: grafana/grafana-oss:10.3.3-ubuntu
          imagePullPolicy: IfNotPresent
          name: dashboard-grafana
          ports:
            - containerPort: 3000
              name: grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: true
            privileged: false
            readOnlyRootFilesystem: false
            runAsUser: 1000
            capabilities: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: vol-grafana-data
            - mountPath: /etc/grafana/grafana.ini
              name: vol-9iyqp
              subPath: grafana.ini
          _init: false
          __active: true
          resources: {}
      volumes:
        - name: vol-grafana-data
          persistentVolumeClaim:
            claimName: pvc-grafana-data
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: Recreate
#    type: Recreate
#    rollingUpdate:
#      maxSurge: string
#      maxUnavailable: string
#  minReadySeconds: int
#  paused: boolean
__clone: true


## Persistence Storage Claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-grafana-data
  annotations:
    {}
    #  key: string
  labels:
    appx: grafana
    type: database
    name: pvc-grafana-data
    #  key: string
#  namespace: envi-production
spec:
  accessModes:
    - ReadWriteOnce
#    - string
  resources:
    requests:
      storage: 1Gi
      #  key: string
#    claims:
#      - name: string
#    limits:  key: string
#  storageClassName: Use the default class
  volumeName: ''
#  dataSource:
#    apiGroup: string
#    kind: string
#    name: string
#  dataSourceRef:
#    apiGroup: string
#    kind: string
#    name: string
#    namespace: string
#  volumeMode: string
__clone: true



